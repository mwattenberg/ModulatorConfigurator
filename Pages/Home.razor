@page "/"
@inject IJSRuntime JSRuntime
@inject ModusFileParserService ModusParser
@inject ModulatorCodeGeneratorService CodeGenerator
@implements IAsyncDisposable

@using ModulatorConfigurator.Models

<PageTitle>Modulator Configurator</PageTitle>

<div class="min-vh-100 bg-light p-4">
    <header class="mb-4">
        <h1 class="display-5 fw-bold">Modulator Configurator</h1>
    </header>
    
    <!-- File Upload Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="fas fa-upload me-2"></i>
                Import .modus Configuration File
            </h5>
        </div>
        <div class="card-body">
            <!-- Drop Zone -->
            <div @ref="dropZoneElement" class="file-drop-zone" @onclick="TriggerFileInput">
                <div class="upload-icon">📁</div>
                <h6>Drop your .modus file here</h6>
                <p class="text-muted mb-0">or click to browse files</p>
                <small class="text-muted">Only .modus files are supported</small>
            </div>
            
            <!-- Hidden File Input -->
            <input type="file" 
                   @ref="fileInputElement" 
                   @onchange="OnFileInputChange"
                   accept=".modus"
                   style="display: none;" />
            
            <!-- File Status -->
            @if (!string.IsNullOrEmpty(uploadStatus))
            {
                <div class="alert @(uploadSuccess ? "alert-success" : "alert-danger") mt-3">
                    <i class="fas @(uploadSuccess ? "fa-check-circle" : "fa-exclamation-triangle") me-2"></i>
                    @uploadStatus
                </div>
            }
            
            <!-- Parsed PWMs Display (Read-only) -->
            @if (parsedPhases.Any())
            {
                <div class="mt-3">
                    <h6>Found PWM Modulators (@parsedPhases.Count):</h6>
                    <div class="row">
                        @foreach (var pwm in parsedPhases)
                        {
                            <div class="col-md-6 col-lg-4 col-xl-3 mb-2">
                                <div class="card card-body bg-light">
                                    <h6 class="mb-1 text-primary">@pwm.Alias</h6>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    
    <!-- Action Buttons -->
    <div class="mb-4">
        <button class="btn btn-success btn-lg me-3" @onclick="AddModulator">
            Add Modulator
        </button>
        <button class="btn btn-primary btn-lg" @onclick="GenerateCode">
            Generate Code
        </button>
    </div>
    
    <!-- Existing Modulators -->
    @for (int i = 0; i < modulators.Count; i++)
    {
        int modulatorIndex = i; // Capture for closure
        var modulator = modulators[modulatorIndex];
        
        <div class="border rounded shadow bg-white p-4 my-4 position-relative">
            <button class="btn-close position-absolute top-0 end-0 m-2" 
                    @onclick="@(() => RemoveModulator(modulatorIndex))">&times;</button>
            
            <input type="text" 
                   @bind="modulator.Name" 
                   class="fs-5 fw-bold mb-2 border p-2 w-50 form-control" 
                   placeholder="Modulator Name" />
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <input class="form-control mb-2" 
                           @bind="modulator.Frequency" 
                           placeholder="Frequency" />
                </div>
                <div class="col-md-6">
                    <input class="form-control mb-2" 
                           @bind="modulator.Deadtime" 
                           placeholder="Deadtime" />
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <input class="form-control" 
                           @bind="modulator.DutyCycle" 
                           placeholder="Duty-cycle" />
                </div>

            </div>

            <!-- Group Number Selection -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Group Number</label>
                    <select class="form-select" @bind="modulator.GroupNumber">
                        <option value="0">Group 0</option>
                        <option value="1">Group 1</option>
                        <option value="2">Group 2</option>
                    </select>
                </div>
            </div>

            <!-- Trigger Settings -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Trigger Start</label>
                    <select class="form-select" @bind="modulator.TriggerStart">
                        <option value="">-- Select Trigger Start --</option>
                        @foreach (var option in GetTriggerOptions(modulator.GroupNumber))
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Trigger Stop</label>
                    <select class="form-select" @bind="modulator.TriggerStop">
                        <option value="">-- Select Trigger Stop --</option>
                        @foreach (var option in GetTriggerOptions(modulator.GroupNumber))
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Trigger Swap</label>
                    <select class="form-select" @bind="modulator.TriggerSwap">
                        <option value="">-- Select Trigger Swap --</option>
                        @foreach (var option in GetTriggerOptions(modulator.GroupNumber))
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                </div>
            </div>
            
            <div class="mt-4">
                <button class="btn btn-primary" @onclick="@(() => AddPhase(modulatorIndex))">Add phase</button>
            </div>
            
            @for (int j = 0; j < modulator.Phases.Count; j++)
            {
                int phaseIndex = j; // Capture for closure
                var phase = modulator.Phases[phaseIndex];
                
                <div class="border rounded p-3 my-2 bg-light position-relative">
                    <button class="btn-close position-absolute top-0 end-0 m-1" 
                            @onclick="@(() => RemovePhase(modulatorIndex, phaseIndex))">&times;</button>
                    
                    <h6 class="fw-semibold">Phase @(phaseIndex + 1)</h6>
                    
                    <!-- PWM Selection: Dropdown if parsed PWMs available, otherwise text input -->
                    @if (parsedPhases.Any())
                    {
                        <div class="mb-2">
                            <label class="form-label">PWM</label>
                            <select class="form-select" @bind="phase.Pwm">
                                <option value="">-- Select PWM or enter manually --</option>
                                @foreach (var pwm in parsedPhases)
                                {
                                    <option value="@pwm.Alias">@pwm.Alias</option>
                                }
                            </select>
                        </div>
                        
                        <!-- Manual PWM input if "Custom" or specific option selected -->
                        <div class="mb-2">
                            <label class="form-label">Manual PWM Entry (optional)</label>
                            <input class="form-control" 
                                   @bind="phase.Pwm" 
                                   placeholder="Enter PWM name manually" />
                        </div>
                    }
                    else
                    {
                        <input class="form-control mb-2" 
                               @bind="phase.Pwm" 
                               placeholder="PWM" />
                    }
                    
                    <input class="form-control mb-2" 
                           @bind="phase.PhaseShift" 
                           placeholder="Phase Shift" />
                    
                    <div class="form-check mb-2">
                        <input class="form-check-input" 
                               type="checkbox" 
                               @bind="phase.GenerateIsr" 
                               id="generateIsr-@phase.Id" />
                        <label class="form-check-label" for="generateIsr-@phase.Id">
                            Generate ISR
                        </label>
                    </div>
                    
                    @if (phase.GenerateIsr)
                    {
                        <div class="mb-2">
                            <label class="form-label">ISR Trigger Source</label>
                            <select class="form-select" @bind="phase.IsrTriggerSource">
                                <option value="Period match">Period match</option>
                                <option value="Compare 0 match">Compare 0 match</option>
                                <option value="Compare 1 match">Compare 1 match</option>
                            </select>
                        </div>
                    }
                    
                    <div class="form-check mb-2">
                        <input class="form-check-input" 
                               type="checkbox" 
                               @bind="phase.TriggerAdc" 
                               id="triggerAdc-@phase.Id" />
                        <label class="form-check-label" for="triggerAdc-@phase.Id">
                            Trigger ADC
                        </label>
                    </div>
                    
                    @if (phase.TriggerAdc)
                    {
                        <div class="mb-2">
                            <label class="form-label">Select Trigger Source</label>
                            <select class="form-select" @bind="phase.AdcTriggerSource">
                                @for (int k = 0; k < 8; k++)
                                {
                                    var triggerName = $"TR{k}";
                                    <option value="@triggerName">@triggerName</option>
                                }
                            </select>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<!-- Generated Code Modal -->
@if (showCodeModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Generated Code</h5>
                    <button type="button" class="btn-close" @onclick="CloseCodeModal"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs" role="tablist">
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == "header" ? "active" : "")" 
                                    @onclick="@(() => activeTab = "header")">
                                @(generatedHeaderFileName ?? "modulator_config.h")
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == "source" ? "active" : "")" 
                                    @onclick="@(() => activeTab = "source")">
                                @(generatedSourceFileName ?? "modulator_config.c")
                            </button>
                        </li>
                    </ul>
                    
                    <div class="tab-content mt-3">
                        @if (activeTab == "header")
                        {
                            <pre class="bg-dark text-light p-3" style="height: 500px; overflow-y: auto;"><code>@generatedHeaderCode</code></pre>
                        }
                        else
                        {
                            <pre class="bg-dark text-light p-3" style="height: 500px; overflow-y: auto;"><code>@generatedSourceCode</code></pre>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCodeModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="DownloadFiles">Download Files</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ModulatorModel> modulators = new();

    private List<Phase> parsedPhases = new();
    private int nextModulatorId = 1;
    private int nextPhaseId = 1;
    
    private ElementReference dropZoneElement;
    private ElementReference fileInputElement;
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<Home>? dotNetRef;
    
    private string uploadStatus = "";
    private bool uploadSuccess = false;
    private bool showCodeModal = false;
    private string activeTab = "header";
    private string generatedHeaderCode = "";
    private string generatedSourceCode = "";
    private string generatedHeaderFileName = "modulator_config.h";
    private string generatedSourceFileName = "modulator_config.c";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupFileDropZone", dropZoneElement, dotNetRef);
        }
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeVoidAsync("triggerFileInput", fileInputElement);
    }

    private async Task OnFileInputChange(ChangeEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("handleFileInput", fileInputElement, dotNetRef);
    }

    [JSInvokable]
    public async Task OnFileSelected(string fileName, string content)
    {
        await ProcessModusFile(fileName, content);
    }

    [JSInvokable]
    public async Task OnFileDropped(string fileName, string content)
    {
        await ProcessModusFile(fileName, content);
    }

    [JSInvokable]
    public async Task OnFileError(string error)
    {
        uploadStatus = error;
        uploadSuccess = false;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task ProcessModusFile(string fileName, string content)
    {
        try
        {
            var result = ModusParser.ParseModusFile(content);
            
            if (result.Success)
            {
                parsedPhases = result.Phases;
                uploadStatus = $"Successfully parsed {fileName}. Found {result.Phases.Count} phases.";
                uploadSuccess = true;
            }
            else
            {
                uploadStatus = result.ErrorMessage;
                uploadSuccess = false;
                parsedPhases.Clear();
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error processing file: {ex.Message}";
            uploadSuccess = false;
            parsedPhases.Clear();
        }
        
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void AddModulator()
    {
        modulators.Add(new ModulatorModel { 
            Id = nextModulatorId++, 
            Name = $"Modulator {modulators.Count + 1}" 
        });
    }

    private void RemoveModulator(int index)
    {
        if (index >= 0 && index < modulators.Count)
        {
            modulators.RemoveAt(index);
        }
    }

    private void AddPhase(int modulatorIndex)
    {
        if (modulatorIndex >= 0 && modulatorIndex < modulators.Count)
        {
            modulators[modulatorIndex].Phases.Add(new PhaseModel { Id = nextPhaseId++ });
        }
    }

    private void RemovePhase(int modulatorIndex, int phaseIndex)
    {
        if (modulatorIndex >= 0 && modulatorIndex < modulators.Count && 
            phaseIndex >= 0 && phaseIndex < modulators[modulatorIndex].Phases.Count)
        {
            modulators[modulatorIndex].Phases.RemoveAt(phaseIndex);
        }
    }

    private void GenerateCode()
    {
        try
        {
            if (!modulators.Any())
            {
                uploadStatus = "Please add at least one modulator before generating code.";
                uploadSuccess = false;
                StateHasChanged();
                return;
            }

            var result = CodeGenerator.GenerateCode(modulators.Cast<Modulator>().ToList());
            
            if (result.Success)
            {
                generatedHeaderCode = result.HeaderFile;
                generatedSourceCode = result.SourceFile;
                generatedHeaderFileName = result.HeaderFileName ?? GetGeneratedFileName(".h");
                generatedSourceFileName = result.SourceFileName ?? GetGeneratedFileName(".c");
                showCodeModal = true;
                uploadStatus = "Code generation completed successfully!";
                uploadSuccess = true;
            }
            else
            {
                uploadStatus = $"Code generation failed: {result.ErrorMessage}";
                uploadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error generating code: {ex.Message}";
            uploadSuccess = false;
        }
        
        StateHasChanged();
    }

    private void CloseCodeModal()
    {
        showCodeModal = false;
    }

    private string GetGeneratedFileName(string extension)
    {
        if (modulators.Any() && !string.IsNullOrWhiteSpace(modulators.First().Name))
        {
            var baseName = modulators.First().Name.ToLower()
                .Replace(" ", "_")
                .Replace("-", "_")
                .Replace(".", "_");
            return $"{baseName}{extension}";
        }
        return $"modulator_config{extension}";
    }

    private async Task DownloadFiles()
    {
        try
        {
            // Download header file with custom name
            await JSRuntime.InvokeVoidAsync("downloadFile", generatedHeaderFileName, generatedHeaderCode);
            
            // Download source file with custom name
            await JSRuntime.InvokeVoidAsync("downloadFile", generatedSourceFileName, generatedSourceCode);
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error downloading files: {ex.Message}";
            uploadSuccess = false;
            StateHasChanged();
        }
    }

    private List<string> GetTriggerOptions(int groupNumber)
    {
        if (groupNumber == 0)
        {
            return new List<string>
            {
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN0",
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN1",
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN2",
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN3"
            };
        }
        else if (groupNumber == 1)
        {
            var options = new List<string>();
            for (int i = 4; i <= 15; i++)
            {
                options.Add($"TRIG_OUT_MUX_10_TCPWM0_TR_IN{i}");
            }
            return options;
        }
        else if (groupNumber == 2)
        {
            var options = new List<string>();
            for (int i = 1; i <= 10; i++)
            {
                options.Add($"TBD{i}");
            }
            return options;
        }
        return new List<string>();
    }

    public async ValueTask DisposeAsync()
    {
        dotNetRef?.Dispose();
        if (jsModule != null)
        {
            await jsModule.DisposeAsync();
        }
    }
}
