@using ModulatorConfigurator.Models

<div class="border rounded shadow bg-white p-4 my-4 position-relative">
    <button class="btn-close position-absolute top-0 end-0 m-2" @onclick="OnRemove">&times;</button>
    
    <input type="text" 
           @bind="Modulator.Name" 
           class="fs-5 fw-bold mb-2 border p-2 w-50 form-control" 
           placeholder="Modulator Name" />
    
    <div class="row mb-3">
        <div class="col-md-6">
            <input class="form-control mb-2" 
                   @bind="Modulator.Frequency" 
                   placeholder="Frequency" />
        </div>
        <div class="col-md-6">
            <input class="form-control mb-2" 
                   @bind="Modulator.Deadtime" 
                   placeholder="Deadtime" />
        </div>
    </div>
    
    <div class="row mb-3">
        <div class="col-md-6">
            <input class="form-control" 
                   @bind="Modulator.DutyCycle" 
                   placeholder="Duty-cycle" />
        </div>

    </div>

    <!-- Trigger Settings - All in one row -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">Trigger Start</label>
            <select class="form-select" @bind="Modulator.TriggerStart">
                <option value="">-- Select Trigger Start --</option>
                @foreach (var option in GetTriggerOptions(Modulator.GroupNumber))
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Trigger Stop</label>
            <select class="form-select" @bind="Modulator.TriggerStop">
                <option value="">-- Select Trigger Stop --</option>
                @foreach (var option in GetTriggerOptions(Modulator.GroupNumber))
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Trigger Swap</label>
            <select class="form-select" @bind="Modulator.TriggerSwap">
                <option value="">-- Select Trigger Swap --</option>
                @foreach (var option in GetTriggerOptions(Modulator.GroupNumber))
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>
    </div>

    <div class="mt-4">
        <button class="btn btn-primary" @onclick="AddPhase">Add phase</button>
    </div>
    
    @for (int i = 0; i < Modulator.Phases.Count; i++)
    {
        int phaseIndex = i; // Capture for closure
        <PhaseComponent 
            @key="Modulator.Phases[phaseIndex].Id"
            Phase="Modulator.Phases[phaseIndex]" 
            Index="phaseIndex" 
            OnRemove="@(() => RemovePhase(phaseIndex))" />
    }
</div>

@code {
    [Parameter] public ModulatorModel Modulator { get; set; } = new();
    [Parameter] public int Index { get; set; }
    [Parameter] public EventCallback OnRemove { get; set; }

    private int nextPhaseId = 1;

    private void AddPhase()
    {
        Modulator.Phases.Add(new PhaseModel { Id = nextPhaseId++ });
    }

    private void RemovePhase(int index)
    {
        if (index >= 0 && index < Modulator.Phases.Count)
        {
            Modulator.Phases.RemoveAt(index);
        }
    }

    private List<string> GetTriggerOptions(int groupNumber)
    {
        if (groupNumber == 0)
        {
            return new List<string>
            {
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN0",
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN1",
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN2",
                "TRIG_OUT_MUX_9_TCPWM0_TR_IN3"
            };
        }
        else if (groupNumber == 1)
        {
            var options = new List<string>();
            for (int i = 4; i <= 15; i++)
            {
                options.Add($"TRIG_OUT_MUX_10_TCPWM0_TR_IN{i}");
            }
            return options;
        }
        else if (groupNumber == 2)
        {
            var options = new List<string>();
            for (int i = 1; i <= 10; i++)
            {
                options.Add($"TBD{i}");
            }
            return options;
        }
        return new List<string>();
    }
}